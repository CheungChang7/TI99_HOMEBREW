REM READ PACMAN DATA
! PLAYER OBJECT:
! STATE | DIR 1-4 | FRME 0-3 | X | Y | SPEED | ANIM DIR 1,-1 | CHAR # | TIMER
!   1        2         3       4   5    6    7    8   |    9      |    10   |  11  | 12  |   13   |   14   |  15  |    16
! GHOST OBJECT:
! STATE | DIR 1-4 | FRM 0-1 | X | Y | SPD | CH | TMR  | RTE INDEX | RTE DIR | RTE# | COL | B CHAR | B COL  | TMR2 |  SCR STAT
! GHOST STATES
!  1    EATEN ENTERING HOME
!  2    BUSTING OUT
!  3    IN JAIL
!  4    ROAMING
!
! ROUTES: 1-4 MAZE ROUTES
!         5 JAIL ROUTE
!         6 BUST OUT
!         7 HOMING
! COLOR SET MAP: RED 5 - 16
!                YEL 12 - 17
!                GLD 11 - 18
!                LGN 4  - 19
!                DGR 13 - 20
!                WHT 16 - 21
!                GRY 15 - 22
!                LBL 8  - 23
!                PNK 10 - 24
! LM - CH, X, Y
OPTION BASE 1 :: DIM P(9) :: DIM G(4,16) :: DIM MZ$(24) :: DIM RSZ(9) :: DIM RT(9,60)
DIM SCRS(10) :: DIM NM$(10) :: DIM LM(20,7)
TOP:
CALL CLEAR :: CALL LINK("SCRN2") :: CALL SCREEN(2) :: GOSUB INTLZ :: GOSUB SETCOL :: GOSUB OPENDSK
GOSUB RDGFX :: CALL LINK("DISPLY",11,12,"LOADING!!!") :: GOSUB RDSCRS :: GOSUB RDMAZE :: GOSUB MKSPRTS :: GOSUB BLKOUT :: GOSUB DRTITLE
END
INTLZ:
    COUNT,I,P2,DOTS,SC2,SC1=0 :: SPEED=4 :: LV=1 :: LF=3 :: MCLR=5
    RSZ(5)=5 :: RSZ(6)=1 :: RSZ(7)=3 :: PLM=50
    RT(5,1)=81 :: RT(5,2)=73 :: RT(5,3)=97 :: RT(5,4)=121 :: RT(5,5)=81 :: RT(6,1)=97
    RT(7,1)=65 :: RT(7,2)=97 :: RT(7,3)=81 :: GOSUB INITPAC :: RETURN
INITPAC:
    DC=0 :: P(7),P(3),P(2)=1 :: P(4)=97 :: P(5)=145 :: NDIR,P(1)=0
    P(7),P(3),P(2)=1 :: P(4)=97 :: P(5)=145 :: P(6)=SPEED :: CALL PATTERN(#5,32) :: RETURN
OPENDSK:
    !ON ERROR OPENDSK
    !I=I+1 :: A$="DSK"&STR$(I) :: IF I>8 THEN ERROUT
    A$="DSK2"
    OPEN #1:A$&".PMDAT",INPUT :: OPEN #2:A$&".PMSCR",INPUT :: OPEN #3:A$&".PMGFX",INPUT :: RETURN
ERRDSK:
    GOTO OPENDSK
START:
    GOSUB HDSPRTS :: CALL CLEAR :: CALL LINK("CHAR2",34,"0000183C3C18000000183C7E7E3C1800") :: GOSUB BLKOUT
    GOSUB STFMP :: GOSUB DRHUD :: GOSUB DRMAZE :: GOSUB SETCOL :: GOSUB STGHOST
    CALL DRLF(LF) :: GOTO GAME
RDSCRS:
    FOR I=1 TO 10 :: INPUT #2:NM$(I) :: INPUT #2:SCRS(I) :: NEXT I :: RETURN
READY:
    CALL LINK("DISPLY",15,11,"*+,-./") :: CALL LINK("DELAY",3000) :: CALL HCHAR(15,11,32,6) :: RETURN
STGHOST:
    GOSUB ERGHOST :: GOSUB ERPAC :: CALL MAGNIFY(1)
    FOR I=1 TO 4 :: G(I,3),G(I,9),G(I,10)=1 :: G(I,1)=3 :: G(I,15)=LM(LV,7)-I :: IF G(I,15)<0 THEN G(I,15)=0
    G(I,2)=4 :: G(I,4)=81+((I-2)*16) :: G(I,5)=89
    G(I,16),G(I,8)=0 :: G(I,6)=SPEED :: G(I,11)=5 :: G(I,13)=48 :: NEXT I
    G(1,1)=4 :: G(1,4)=97 :: G(1,5)=65 :: G(1,11)=1 :: G(1,15)=0
    G(1,14),G(1,12)=7 :: G(2,14),G(2,12)=14 :: G(3,14),G(3,12)=8 :: G(4,14),G(4,12)=11 :: P(7),P(2),P(1)=1
    P(3)=0 :: P(4)=97 :: P(5)=145 :: GOSUB SETPATS
    RETURN
SETPATS:
    FOR I=1 TO 4 :: G(I,7)=G(I,13)+((G(I,2)-1)*2)+G(I,3) :: G(I,3)=G(I,3)+1 :: IF G(I,3)=2 THEN G(I,3)=0
    NEXT I :: P(8)=32+((P(2)-1)*4)+P(3) :: P(3)=P(3)+1 :: IF P(3)=4 THEN P(3)=0
    RETURN
RDMAZE:
    INPUT #1:MCLR :: INPUT #1:DOTS
    FOR I=1 TO 4 :: INPUT #1:RSZ(I) :: FOR J=1 TO RSZ(I) :: INPUT #1:RT(I,J) :: NEXT J :: NEXT I
    FOR I=1 TO 24 :: INPUT #1:L$ :: MZ$(I)=L$ :: NEXT I :: RETURN
ERROUT:
    CALL LINK("DISPLY",12,6,"ERROR READING DATA FROM DISK") :: CALL LINK("DELAY",2000) :: END
RDGFX:
    FOR I=0 TO 220 STEP 4 :: INPUT #3:A$ :: CALL LINK("CHAR2",I,A$) :: NEXT I
    FOR I=32 TO 140 STEP 4 :: INPUT #3:A$ :: CALL CHAR(I,A$) :: NEXT I :: RETURN
BLKOUT:
    FOR I=-3 TO 24 :: CALL LINK("COLOR2",I,2,2) :: NEXT I :: RETURN
SETCOL:
    CALL LINK("COLOR2",-3,12,2,-2,7,2,-1,13,2,0,16,2,1,12,2)
    CALL LINK("COLOR2",2,12,2,3,16,2,4,16,2,5,16,2,6,16,2)
    CALL LINK("COLOR2",7,16,2,8,16,2,9,MCLR,2,10,MCLR,2,11,11,2)
    CALL LINK("COLOR2",12,8,2,13,16,2,14,16,2,15,16,2,16,7,2)
    CALL LINK("COLOR2",17,12,2,18,11,2,19,4,2,20,13,2)
    CALL LINK("COLOR2",21,16,2,22,15,2,23,8,2,24,10,2) :: RETURN
DRMAZE:
    FOR I=1 TO 24 :: CALL LINK("DISPLY",I,1,MZ$(I)) :: NEXT I :: RETURN
DRHUD:
    CALL CLEAR :: CALL LINK("DISPLY",1,26,"HISCORE") :: CALL HCHAR(2,26,48,7)
    CALL LINK("DISPLY",4,26,"PLAYER1") :: CALL HCHAR(5,26,48,7) :: RETURN
DRSCRS:
    GOSUB HDSPRTS :: GOSUB CLINTR :: CALL LINK("DISPLY",2,4,"PAC!MAN ALL<TIME HI<SCORES")
    FOR I=1 TO 10 :: CALL LINK("DISPLY",2+(I*2),9,NM$(I)) :: A$=STR$(SCRS(I))
    CALL LINK("DISPLY",2+(I*2),25-LEN(A$),A$) :: NEXT I :: I=0 :: FLIP=1
KYSCRS:
    CALL KEY(0,KY,S) :: IF KY>48 AND KY<53 THEN HNDKEY
    K=K+1 :: IF K>=50 THEN K=0 :: GOSUB BLINK
    GOTO KYSCRS
CLINTR:
    FOR I=2 TO 23 :: CALL HCHAR(I,2,32,30) :: NEXT I :: RETURN
CLMAZE:
    FOR I=1 TO 24 :: CALL HCHAR(I,1,32,25) :: NEXT I :: RETURN
BLLAY:
    FOR J=1 TO 500 :: K=K+1 :: IF K>=100 THEN GOSUB BLINK :: K=1
    NEXT J :: RETURN
BLINK:
    FLIP=-FLIP
    IF FLIP<0 THEN CALL LINK("CHAR2",34,"0000183C3C18000000183C7E7E3C1800") ELSE CALL LINK("CHAR2",34,"00183C7E7E3C18000000183C3C180000")
RETURN
DRBRDR:
    FOR I=1 TO 31 STEP 2 :: CALL HCHAR(1,I,34) :: CALL HCHAR(24,I,35)
    CALL HCHAR(1,I+1,35) :: CALL HCHAR(24,I+1,34) :: NEXT I
    FOR I=2 TO 22 STEP 2 :: CALL HCHAR(I,1,35) :: CALL HCHAR(I,32,34)
    CALL HCHAR(I+1,1,34) :: CALL HCHAR(I+1,32,35) :: NEXT I :: RETURN
DRTITLE:
    GOSUB INITPAC :: G(1,3)=0 :: GOSUB HDSPRTS :: CALL CLEAR :: GOSUB DRBRDR
    GOSUB PTSPRTS :: GOSUB SETCOL :: J,I=0 :: K=50 :: FLIP=1
DISSTRT:
    CALL KEY(0,KY,S) :: IF KY>48 AND KY<52 THEN HNDKEY
    IF I=0 THEN CALL LINK("DISPLY",12,9,"PRESS 1 TO START") :: CALL LINK("DISPLY",14,5,"PRESS 2 FOR INSTRUCTIONS")
    IF I=0 THEN CALL LINK("DISPLY",16,5,"PRESS 3 FOR HIGH SCORES")
    IF I=K THEN CALL HCHAR(12,9,32,16) :: CALL HCHAR(14,5,32,24) :: CALL HCHAR(16,5,32,24)
    J=J+1 :: IF J>(K/5) THEN GOSUB BLINK :: J=0
    I=I+1 :: IF I>K*2 THEN I=0
    GOSUB MVTITL :: GOTO DISSTRT ::  RETURN
MVTITL:
    IF G(1,4)<134 THEN K=100 :: GOTO MVEND
    P(4)=P(4)+1 :: G(1,4)=G(1,4)-1 :: P(3)=P(3)+1 :: IF P(3)=4 THEN P(3)=0
    G(1,3)=G(1,3)+1 :: IF G(1,3)=2 THEN G(1,3)=0
    CALL PATTERN(#6,88+(G(1,3)*4),#8,96+(P(3)*4)) :: CALL LOCATE(#6,G(1,5),G(1,4),#7,G(1,5),G(1,4),#8,P(5),P(4))
MVEND:
    RETURN
HNDKEY:
    IF KY=50 THEN DRINST ELSE IF KY=49 THEN START
    IF KY=51 THEN DRSCRS
    GOTO DRTITLE
MKSPRTS:
    CALL SPRITE(#1,48,1,193,1,0,0,#2,48,1,193,17,0,0,#3,48,1,193,33,0,0,#4,48,1,193,49,0,0)
    CALL SPRITE(#5,40,1,193,65,0,0)
    CALL SPRITE(#6,88,1,193,81,0,0,#7,120,1,193,97,0,0,#8,96,1,193,113,0,0,#9,84,1,193,129,0,0)
    CALL SPRITE(#10,84,1,193,145,0,0,#11,64,1,193,161,0,0,#12,68,1,193,177,0,0,#13,108,1,193,193,0,0)
    CALL SPRITE(#14,76,1,193,209,0,0,#15,72,1,193,225,0,0,#16,80,1,193,241) :: RETURN
HDSPRTS:
    CALL LOCATE(#1,193,1,#2,193,17,#3,193,33,#4,193,49,#5,193,65)
    CALL LOCATE(#6,193,81,#7,193,97,#8,193,113,#9,193,129,#10,193,145)
    CALL LOCATE(#11,193,161,#12,193,177,#13,193,193,#14,193,209,#15,193,224,#16,193,241) :: RETURN
PTSPRTS:
    G(1,4)=234 :: P(4)=8 :: G(1,5),P(5)=61 :: CALL MAGNIFY(3)
    CALL LOCATE(#11,41,87,#12,27,95,#13,13,109,#14,13,133,#15,27,145,#16,42,157)
    CALL LOCATE(#9,42,171,#10,42,187,#6,61,234,#7,61,234,#8,61,8) :: CALL COLOR(#11,8,#12,8,#13,8,#14,8,#15,8)
    CALL COLOR(#16,8,#9,8,#10,8,#6,7,#7,16) :: CALL COLOR(#8,12) :: RETURN
COLGHOST:
    CALL COLOR(#1,7,#2,14,#3,8,#4,11,#5,12) :: RETURN
ERGHOST:
    CALL COLOR(#1,1,#2,1,#3,1,#4,1) :: RETURN
ERPAC:
    CALL COLOR(#5,1) :: RETURN
DRINST:
    K=0 :: GOSUB HDSPRTS :: GOSUB CLINTR :: CALL MAGNIFY(1) :: CALL LINK("DISPLY",5,9,"CHARACTER\NICK NAME")
    CALL LOCATE(#1,49,49) :: CALL PATTERN(#1,48) :: CALL COLOR(#1,7) :: GOSUB BLLAY
    CALL LINK("DISPLY",7,9,"<SHADOW") :: GOSUB BLLAY :: CALL LINK("DISPLY",7,20,"[BLINKY[") :: GOSUB BLLAY
    CALL LOCATE(#2,65,49) :: CALL PATTERN(#2,48) :: CALL COLOR(#2,14) :: GOSUB BLLAY
    CALL LINK("DISPLY",9,9,"<SPEEDY") :: GOSUB BLLAY :: CALL LINK("DISPLY",9,20,"[PINKY[") :: GOSUB BLLAY
    CALL LOCATE(#3,81,49) :: CALL PATTERN(#3,48) :: CALL COLOR(#3,8) :: GOSUB BLLAY
    CALL LINK("DISPLY",11,9,"<BASHFUL") :: GOSUB BLLAY :: CALL LINK("DISPLY",11,20,"[INKY[") :: GOSUB BLLAY
    CALL LOCATE(#4,97,49) :: CALL PATTERN(#4,48) :: CALL COLOR(#4,11) :: GOSUB BLLAY
    CALL LINK("DISPLY",13,9,"<POKEY") :: GOSUB BLLAY :: CALL LINK("DISPLY",13,20,"[CLYDE[") :: GOSUB BLLAY
    CALL LINK("DISPLY",19,14,"! 10 PTS") :: CALL LINK("DISPLY",21,14,"& 50 PTS") :: GOSUB BLLAY
    CALL LINK("DISPLY",17,7,"&!!!") :: CALL LOCATE(#5,129,140) :: CALL PATTERN(#5,76)
    CALL COLOR(#5,12) :: PX=140 :: PY=129 :: DIR=4 :: DX=49 :: PFRAME=40 :: GF,GFRAME=48
    REPEAT
       GOSUB MVPAC :: IF PX=73 THEN CALL HCHAR(17,10,32)
       IF PX=65 THEN CALL HCHAR(17,9,32)
       IF PX=57 THEN CALL HCHAR(17,8,32)
    UNTIL PX<=DX
    CALL HCHAR(17,7,32) :: CALL COLOR(#1,5,#2,5,#3,5,#4,5) :: DIR=1 :: GF,GFRAME=56 :: PFRAME=44 :: DY=99
    REPEAT
       GOSUB MVPAC
    UNTIL PY<=DY
    CALL COLOR(#4,11,#5,1) :: CALL PATTERN(#4,136) :: GOSUB BLLAY :: CALL COLOR(#4,1,#5,12) :: DY=83
    REPEAT
       GOSUB MVPAC
    UNTIL PY<=DY
    CALL COLOR(#3,11,#5,1) :: CALL PATTERN(#3,137) :: GOSUB BLLAY :: CALL COLOR(#3,1,#5,12) :: DY=67
    REPEAT
       GOSUB MVPAC
    UNTIL PY<=DY
    CALL COLOR(#2,11,#5,1) :: CALL PATTERN(#2,138) :: GOSUB BLLAY :: CALL COLOR(#2,1,#5,12) :: DY=49
    REPEAT
       GOSUB MVPAC
    UNTIL PY<=DY
    CALL COLOR(#1,11,#5,1) :: CALL PATTERN(#1,139) :: GOSUB BLLAY :: CALL COLOR(#1,1,#5,12)
    CALL PATTERN(#5,35) :: K=0 :: GOTO KYSCRS
MVPAC:
    K=K+1 :: IF K>24 THEN K=1
    IF K>12 THEN CLC
    ON K GOTO F1,DUD,DUD,DUD,DUD,DUD,F2,DUD,DUD,DUD,DUD,DUD
CLC:
    ON K-12 GOTO F3,DUD,DUD,DUD,DUD,DUD,F4,DUD,DUD,DUD,DUD,DUD
F1:
    PF=PFRAME :: GOTO FIN
F2:
    PF=PFRAME+1 :: GOTO FIN
F3:
    PF=PFRAME+2 :: GOTO FIN
F4:
    PF=PFRAME+3 :: GF=GF+1 :: IF GF>GFRAME+1 THEN GF=GFRAME :: GOSUB BLINK
    CALL PATTERN(#1,GF,#2,GF,#3,GF,#4,GF)
FIN:
    IF DIR<>4 THEN PY=PY-1 ELSE PX=PX-1 :: IF K=1 AND GF=GFRAME+1 THEN GOSUB BLINK
    CALL LOCATE(#5,PY,PX) :: CALL PATTERN(#5,PF)
DUD:
    RETURN
GAME:
     IF LV<11 THEN BNS=100*LV ELSE IF LV<20 THEN BNS=1000+((BNS-10)*1000) ELSE BNS=20000
      EATEN,PIX,PPI,NDIR=0 :: P(1),P(2)=1 :: CH=34 :: XC=INT(((P(4)-1)/8)+1) :: YC=INT(((P(5)-1)/8)+1)
      GOSUB STGHOST :: CALL LOCATE(#5,P(5),P(4),#1,G(1,5),G(1,4),#2,G(2,5),G(2,4),#3,G(3,5),G(3,4),#4,G(4,5),G(4,4))
      G(1,2)=1 :: G(1,9)=2 :: CALL PATTERN(#1,G(1,7),#2,G(2,7),#3,G(3,7),#4,G(4,7),#5,P(8))
      GOSUB COLGHOST :: GOSUB STFR :: GOSUB READY
RDJOY:
      CALL KEY(0,K,S)
      IF S=1 THEN IF K=83 THEN NDIR=1 ELSE IF K=90 THEN NDIR=2 ELSE IF K=65 THEN NDIR=3 ELSE IF K=87 THEN NDIR=4 ELSE NDIR=0
      FLIP=-FLIP
HNDG:
      FOR I=1 TO 4 :: IF P(4)=G(I,4) THEN HNHIT ELSE IF P(5)=G(I,5) THEN HNHIT2
GTR:
    IF G(I,8)=0 THEN GDR
    G(I,8)=G(I,8)-1 :: IF G(I,8)=0 THEN UNS ELSE IF G(I,16)=2 THEN FLSH
GDR:
    IF G(I,13)=56 AND FLIP<0 THEN HNDNXT
    ON G(I,2) GOTO GE,GS,GW,GN
GE:
   IF G(I,4)>=RT(G(I,11),G(I,9)) THEN GCHNS
   G(I,4)=G(I,4)+G(I,6) :: GOTO HNDEND
GS:
   IF G(I,5)>=RT(G(I,11),G(I,9)) THEN GCHEW
   G(I,5)=G(I,5)+G(I,6) :: GOTO HNDEND
GW:
   IF G(I,4)<=RT(G(I,11),G(I,9)) THEN GCHNS
   G(I,4)=G(I,4)-G(I,6) :: GOTO HNDEND
GN:
   IF G(I,5)<=RT(G(I,11),G(I,9)) THEN GCHEW
   G(I,5)=G(I,5)-G(I,6) :: GOTO HNDEND
GCHEW:
      G(I,9)=G(I,9)+G(I,10)
      IF G(I,9)>RSZ(G(I,11)) THEN G(I,9)=1 :: GOTO CHRT :: ELSE IF G(I,9)<1 THEN G(I,9)=RSZ(G(I,11)) :: GOTO CHRT
      IF RT(G(I,11),G(I,9))>G(I,4) THEN G(I,2)=1 ELSE G(I,2)=3
      GOTO GDR
GCHNS:
      G(I,9)=G(I,9)+G(I,10)
      IF G(I,9)>RSZ(G(I,11)) THEN G(I,9)=1 :: GOTO CHRT :: ELSE IF G(I,9)<1 THEN G(I,9)=RSZ(G(I,11)) :: GOTO CHRT
      IF RT(G(I,11),G(I,9))=0 THEN WARP
      IF RT(G(I,11),G(I,9))>G(I,5) THEN G(I,2)=2 ELSE G(I,2)=4
      GOTO GDR
WARP:
     G(I,9)=G(I,9)+G(I,10) :: G(I,4)=RT(G(I,11),G(I,9)) :: GOTO HNDEND
CHRT:
     ON G(I,1) GOTO HOME,BUST,JAIL,ROAM
HOME:
     G(I,13)=48 :: G(I,1),G(I,2)=4 :: G(I,9),G(I,10)=1 :: G(I,11)=I :: G(I,12)=G(I,14) :: G(I,16)=0 :: CALL COLOR(#I,G(I,14)) :: GOTO GDR
BUST:
     G(I,9)=1 :: G(I,1)=4 :: G(I,11)=I :: G(I,2)=4 :: GOTO GDR
JAIL:
     IF G(I,15)>0 THEN G(I,15)=G(I,15)-1 :: GOTO GDR
     G(I,9)=1 :: G(I,2)=3 :: G(I,1)=2 :: G(I,11)=6 :: GOTO GDR
ROAM:
     IF G(I,13)=128 THEN G(I,2)=2 :: G(I,9),G(I,10),G(I,1)=1 :: G(I,11)=7 :: IF G(I,5)<65 THEN GDR ELSE G(I,2)=4 :: GOTO GDR
     IF G(I,10)>0 AND G(I,5)>RT(I,1) THEN G(I,2)=4 :: GOTO GDR ELSE IF G(I,10)>0 THEN G(I,2)=2 :: GOTO GDR
     IF G(I,10)<0 AND G(I,4)>RT(I,RSZ(I)) THEN G(I,2)=3 :: GOTO GDR ELSE G(I,2)=1
     GOTO GDR
HNDEND:
     G(I,7)=G(I,13)+((G(I,2)-1)*2)+G(I,3) :: G(I,3)=G(I,3)+1 :: IF G(I,3)=2 THEN G(I,3)=0
HNDNXT:
NEXT I

CHDIR:
      IF NDIR>0 AND NDIR<>P(2)THEN GOSUB NEWDIR
      P(8)=32+((P(2)-1)*4)+P(3) :: P(3)=P(3)+1 :: IF P(3)=4 THEN P(3)=0
      CANMV=0
      ON P(2)GOTO CHD1,CHD2,CHD3,CHD4
CHD1:
     IF PIX>0 THEN CANMV=1 :: GOTO CHD7
     CALL GCHAR(YC,XC+1,CH) :: GOTO CHD5
CHD2:
     IF PIX>0 THEN CANMV=1 :: GOTO CHD7
     CALL GCHAR(YC+1,XC,CH) :: GOTO CHD5
CHD3:
     IF PIX>0 THEN CANMV=1 :: GOTO CHD7
     IF XC>1 THEN CALL GCHAR(YC,XC-1,CH) ELSE CH=32
     GOTO CHD5
CHD4:
     IF PIX>0 THEN CANMV=1 :: GOTO CHD7
     CALL GCHAR(YC-1,XC,CH)
CHD5:
     IF CH<36 THEN CANMV=1
CHD6:
     IF CANMV=0 THEN BLPP
CHD7:
     IF P(2)=1 THEN P(4)=P(4)+P(6) ELSE IF P(2)=3 THEN P(4)=P(4)-P(6) ELSE IF P(2)=2 THEN P(5)=P(5)+P(6) ELSE P(5)=P(5)-P(6)
CHDC:
     PIX=PIX+P(6) :: IF P(4)<1 THEN P(4)=193 :: PIX=0 ELSE IF P(4)>196 THEN P(4)=1 :: PIX=0
     IF PIX=8 THEN PIX=0
     IF PIX>0 THEN BLPP
     XC=INT(((P(4)-1)/8)+1) :: YC=INT(((P(5)-1)/8)+1) :: CALL GCHAR(YC,XC,CH)
     IF CH=23 THEN ETFR ELSE IF CH<=32 THEN BLPP
     CALL HCHAR(YC,XC,32) :: IF CH=33 THEN CALL CSCO(SC1,SC2,10) :: COUNT=COUNT+1 :: IF COUNT>=DOTS THEN NXTMZ ELSE GOTO BLPP
     IF CH<>35 THEN BLPP
     CALL CSCO(SC1,SC2,50) :: EATEN=0 :: COUNT=COUNT+1 :: IF COUNT=DOTS THEN NXTMZ
     FOR J=1 TO 4
        IF G(J,13)=128 THEN CHDD
        G(J,7)=5 :: CALL COLOR(#J,5) :: G(J,13),G(J,7)=56 :: G(J,8)=LM(LV,5) :: G(J,16)=1
        IF G(J,1)=4 AND RSZ(G(J,11))>5 THEN GOSUB REVRS
CHDD:
     NEXT J
BLPP:
     IF P(1)<11 THEN P(9)=P(9)+1 :: IF P(9)=PLM THEN GOSUB HNDFR
     PPI=PPI+1 :: IF PPI=4 THEN CALL LINK("CHAR2",35,"00") ELSE IF PPI=7 THEN PPI=1 :: CALL LINK("CHAR2",35,"00183C7E7E3C18")
     CALL PATTERN(#1,G(1,7),#2,G(2,7),#3,G(3,7),#4,G(4,7),#5,P(8))
     CALL LOCATE(#5,P(5),P(4),#1,G(1,5),G(1,4),#2,G(2,5),G(2,4),#3,G(3,5),G(3,4),#4,G(4,5),G(4,4)) :: GOTO RDJOY
ETFR:
     CALL CSCO(SC1,SC2,BNS) :: CALL HCHAR(15,13,24) :: P(9)=35 :: GOTO BLPP
HNDFR:
      ON P(1) GOTO HF2,HF2,HF2,HF1,HF3,HF2,HF2,HF2,HF1,HF3
HF1:
    CALL HCHAR(15,13,23)
HF2:
    P(1)=P(1)+1 :: P(9)=0 :: RETURN
HF3:
    P(1)=P(1)+1 :: P(9)=0 :: CALL HCHAR(15,13,32) :: RETURN
REVRS:
      G(J,10)=-G(J,10) :: IF G(J,2)=1 THEN G(J,2)=3 ELSE IF G(J,2)=3 THEN G(J,2)=1 ELSE IF G(J,2)=2 THEN G(J,2)=4 ELSE G(J,2)=2
      G(J,9)=G(J,9)+G(J,10) :: IF G(J,9)>RSZ(G(J,11)) THEN G(J,9)=1 ELSE IF G(J,9)=0 THEN G(J,9)=RSZ(G(J,11))
      G(J,9)=G(J,9)+G(J,10) :: IF G(J,9)>RSZ(G(J,11)) THEN G(J,9)=1 ELSE IF G(J,9)=0 THEN G(J,9)=RSZ(G(J,11))
      RETURN
NEWDIR:
       IF PIX>0 AND ((NDIR=1 AND P(2)=3) OR (NDIR=2 AND P(2)=4) OR (NDIR=3 AND P(2)=1) OR (NDIR=4 AND P(2)=2)) THEN P(2)=NDIR :: NDIR=0 :: PIX=(8-PIX) :: RETURN
       CALL GCHAR(YC-(NDIR=2)+(NDIR=4),XC-(NDIR=1)+(NDIR=3),CH) :: IF PIX=0 AND CH<36 THEN P(2)=NDIR :: NDIR=0
       RETURN
HNHIT:
      IF G(I,13)=128 OR ((P(5)>=G(I,5)) AND ((P(5)-G(I,5))>4)) OR ((P(5)<=G(I,5)) AND ((G(I,5)-P(5))>4)) THEN GTR
      IF G(I,13)=48 THEN DIE
      IF G(I,13)=56 THEN EATS
      GOTO GTR
HNHIT2:
      IF G(I,13)=128 OR ((P(4)>=G(I,4)) AND ((P(4)-G(I,4))>4)) OR ((P(4)<=G(I,4)) AND ((G(I,4)-P(4))>4)) THEN GTR
      IF G(I,13)=48 THEN DIE
      IF G(I,13)=56 THEN EATS
      GOTO GTR
UNS:
    IF G(I,16)=1 THEN G(I,16)=2 :: G(I,12)=16 :: CALL COLOR(#I,16) :: G(I,8)=LM(LV,6) :: GOTO GDR
    CALL COLOR(#I,G(I,14)) :: G(I,13)=48 :: EATEN,G(I,16)=0 :: G(I,12)=G(I,14) :: GOTO GDR
FLSH:
    IF G(I,12)=5 THEN G(I,12)=16 ELSE G(I,12)=5
    CALL COLOR(#I,G(I,12)) :: GOTO GDR
DIE:
    CALL LINK("DELAY",500) :: GOSUB ERGHOST :: GOSUB HDGHOST
    FOR I=44 TO 47 :: CALL PATTERN(#5,I) :: CALL LINK("DELAY",130) :: NEXT I
    FOR I=140 TO 143 :: CALL PATTERN(#5,I) :: CALL LINK("DELAY",130) :: NEXT I :: GOSUB ERPAC
    CALL LOCATE(#5,200,80) :: LF=LF-1 :: CALL DRLF(LF) :: IF LF<1 THEN GAMEOVER
    GOSUB INITPAC :: CALL PATTERN(#1,48,#2,48,#3,48,#4,48) :: GOTO GAME
EATS:
    CALL COLOR(#I,1) :: CALL PATTERN(#5,136+EATEN) :: EATEN=EATEN+1 :: CALL CSCO(SC1,SC2,200*EATEN) :: CALL LINK("DELAY",500)
    G(I,8)=0 :: G(I,16)=3 :: G(I,12)=16 :: G(I,7),G(I,13)=128 :: IF EATEN=4 THEN EATEN=0
    CALL PATTERN(#I,128) :: CALL COLOR(#I,16) :: RV=0
    IF (G(I,9)>(RSZ(G(I,11))/2) AND G(I,10)<0) OR (G(I,9)<(RSZ(G(I,11))/2) AND G(I,10)>0) THEN RV=1
    IF RV=1 THEN J=I :: GOSUB REVRS
    GOTO HNDNXT
NXTMZ:
      CALL PATTERN(#5,P(8)) :: CALL LOCATE(#5,P(5),P(4)) :: CALL LINK("DELAY",500) :: GOSUB ERGHOST :: GOSUB HDGHOST :: FLIP=1 :: COUNT,P(9)=0 :: P(1)=1
      FOR I=1 TO 8 :: FLIP=-FLIP :: IF FLIP<0 THEN CALL LINK("COLOR2",9,16,2,10,16,2) ELSE CALL LINK("COLOR2",9,MCLR,2,10,MCLR,2)
      CALL LINK("DELAY",300) :: NEXT I
      LV=LV+1 :: GOSUB ERPAC :: GOSUB STGHOST :: GOSUB CLMAZE :: CALL LINK("COLOR2",9,MCLR,2,10,MCLR,2) :: GOSUB DRMAZE :: GOTO GAME
GAMEOVER:
    FOR I=1 TO 500 :: IF I=1 CALL LINK("DISPLY",15,9,"GAME OVER")
        IF I=250 THEN CALL HCHAR(15,9,32,9)
        CALL KEY(0,KY,ST) :: IF ST<>0 THEN RESTART
    NEXT I :: GOTO GAMEOVER
RESTART:
    CLOSE #1 :: CLOSE #2 :: CLOSE #3 :: GOTO TOP
HDGHOST:
    CALL LOCATE(#1,256,80,#2,256,80,#3,256,80,#4,256,80) :: RETURN
STFR:
  CALL LINK("COLOR2",-1,LM(LV,4),2) :: CALL LINK("CHPAT2",LV-1,A$) :: CALL LINK("CHAR2",23,A$)
  CALL LINK("CHPAT2",127+LV,A$) :: CALL LINK("CHAR2",24,A$) :: CALL HCHAR(LM(LV,3),LM(LV,2),LM(LV,1)) :: RETURN
STFMP:
      LM(1,1)=152 :: LM(1,2)=32 :: LM(1,3)=9 :: LM(1,4)=7 :: LM(1,5)=100 :: LM(1,6)=50 :: LM(1,7)=4
      LM(2,1)=216 :: LM(2,2)=30 :: LM(2,3)=9 :: LM(2,4)=10 :: LM(2,5)=80 :: LM(2,6)=40 :: LM(2,7)=3
      LM(3,1)=160 :: LM(3,2)=28 :: LM(3,3)=9 :: LM(3,4)=12 :: LM(3,5)=70 :: LM(3,6)=30 :: LM(3,7)=3
      LM(4,1)=176 :: LM(4,2)=26 :: LM(4,3)=9 :: LM(4,4)=4 :: LM(4,5)=60 :: LM(4,6)=20 :: LM(4,7)=2
      LM(5,1)=153 :: LM(5,2)=31 :: LM(5,3)=10 :: LM(5,4)=7 :: LM(5,5)=50 :: LM(5,6)=10 :: LM(5,7)=2
      LM(6,1)=184 :: LM(6,2)=29 :: LM(6,3)=10 :: LM(6,4)=13 :: LM(6,5)=80 :: LM(6,6)=40 :: LM(6,7)=1
      LM(7,1)=154 :: LM(7,2)=27 :: LM(7,3)=10 :: LM(7,4)=7 :: LM(7,5)=60 :: LM(7,6)=20 :: LM(7,7)=1
      LM(8,1)=168 :: LM(8,2)=32 :: LM(8,3)=11 :: LM(8,4)=11 :: LM(8,5)=1 :: LM(8,6)=30 :: LM(8,7)=1
      LM(9,1)=161 :: LM(9,2)=30 :: LM(9,3)=11 :: LM(9,4)=12 :: LM(9,5)=60 :: LM(9,6)=20 :: LM(9,7)=1
      LM(10,1)=169 :: LM(10,2)=28 :: LM(10,3)=11 :: LM(10,4)=11 :: LM(10,5)=1 :: LM(10,6)=10 :: LM(10,7)=1
      LM(11,1)=192 :: LM(11,2)=26 :: LM(11,3)=11 :: LM(11,4)=16 :: LM(11,5)=40 :: LM(11,6)=5 :: LM(11,7)=1
      LM(12,1)=193 :: LM(12,2)=31 :: LM(12,3)=12 :: LM(12,4)=16 :: LM(12,5)=80 :: LM(12,6)=40 :: LM(12,7)=1
      LM(13,1)=170 :: LM(13,2)=29 :: LM(13,3)=12 :: LM(13,4)=11 :: LM(13,5)=1 :: LM(13,6)=5 :: LM(13,7)=1
      LM(14,1)=217 :: LM(14,2)=27 :: LM(14,3)=12 :: LM(14,4)=10 :: LM(14,5)=50 :: LM(14,6)=10 :: LM(14,7)=1
      LM(15,1)=194 :: LM(15,2)=32 :: LM(15,3)=13 :: LM(15,4)=16 :: LM(15,5)=1 :: LM(15,6)=20 :: LM(15,7)=1
      LM(16,1)=200 :: LM(16,2)=30 :: LM(16,3)=13 :: LM(16,4)=15 :: LM(16,5)=1 :: LM(16,6)=1 :: LM(16,7)=1
      LM(17,1)=208 :: LM(17,2)=28 :: LM(17,3)=13 :: LM(17,4)=8 :: LM(17,5)=60 :: LM(17,6)=20 :: LM(17,7)=1
      LM(18,1)=155 :: LM(18,2)=26 :: LM(18,3)=13 :: LM(18,4)=7 :: LM(18,5)=40 :: LM(18,6)=5 :: LM(18,7)=1
      LM(19,1)=195 :: LM(19,2)=31 :: LM(19,3)=14 :: LM(19,4)=16 :: LM(19,5)=1 :: LM(19,6)=10 :: LM(19,7)=1
      LM(20,1)=177 :: LM(20,2)=29 :: LM(20,3)=14 :: LM(20,4)=4 :: LM(20,5)=1 :: LM(20,6)=1 :: LM(20,7)=1
      RETURN

SUB CSCO(S1,S2,V)
    S1=S1+V :: IF S1>9999 THEN S1=10000-S1 :: S2=S2+1
    S$=STR$(S1)
RD:
   IF LEN(S$)<4 THEN S$="0"&S$ :: GOTO RD
   S$=STR$(S2)&S$ :: CALL LINK("DISPLY",5,26+(7-LEN(S$)),S$) :: SUBEND

SUB ANIMPP(N)
    ON N GOTO ANIMA,ANIMC,ANIMB,ANIMC
    ANIMA: CALL CHAR(34,"00183C7E7E3C1800") :: GOTO ANIMC
    ANIMB: CALL CHAR(34,"0000183C3C180000")
    ANIMC: SUBEND
SUB DRLF(L)
    CALL HCHAR(7,29,32,4) :: IF L>1 THEN CALL HCHAR(7,33-(L-1),162,L-1)
    SUBEND

